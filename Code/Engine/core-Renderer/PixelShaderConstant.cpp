#include "core-Renderer/PixelShaderConstant.h"
#include "core-Renderer/PixelShader.h"
#include "core-Renderer/BoolSockets.h"
#include "core-Renderer/IntSockets.h"
#include "core-Renderer/FloatSockets.h"
#include "core-Renderer/StringSockets.h"
#include "core-Renderer/TextureSockets.h"
#include "core-Renderer/Vec4Sockets.h"
#include "core-Renderer/MatrixSockets.h"


///////////////////////////////////////////////////////////////////////////////

PSCBool::PSCBool( const char* name, bool defaultVal )
   : PixelShaderConstant( name )
   , m_defaultVal( defaultVal )
{
}

///////////////////////////////////////////////////////////////////////////////

RPNodeInput* PSCBool::createRPNInput()
{
   return new RPBoolInput( getName() );
}

///////////////////////////////////////////////////////////////////////////////

bool PSCBool::doesTypeMatch( const RPNodeInput& input ) const
{
   return input.isA< RPBoolInput >();
}

///////////////////////////////////////////////////////////////////////////////

void PSCBool::setValue( RCBindPixelShader& comm, const RPNodeInput& input, RuntimeDataBuffer& data )
{
   const RPBoolInput& castInput = static_cast< const RPBoolInput& >( input );
   bool val = castInput.getValue( data );
   comm.setBool( getName(), val );
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

PSCInt::PSCInt( const char* name, int defaultVal )
   : PixelShaderConstant( name )
   , m_defaultVal( defaultVal )
{
}

///////////////////////////////////////////////////////////////////////////////

RPNodeInput* PSCInt::createRPNInput()
{
   return new RPIntInput( getName() );
}

///////////////////////////////////////////////////////////////////////////////

bool PSCInt::doesTypeMatch( const RPNodeInput& input ) const
{
   return input.isA< RPIntInput >();
}

///////////////////////////////////////////////////////////////////////////////

void PSCInt::setValue( RCBindPixelShader& comm, const RPNodeInput& input, RuntimeDataBuffer& data )
{
   const RPIntInput& castInput = static_cast< const RPIntInput& >( input );
   int val = castInput.getValue( data );
   comm.setInt( getName(), val );
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

PSCFloat::PSCFloat( const char* name, float defaultVal )
   : PixelShaderConstant( name )
   , m_defaultVal( defaultVal )
{
}

///////////////////////////////////////////////////////////////////////////////

RPNodeInput* PSCFloat::createRPNInput()
{
   return new RPFloatInput( getName() );
}

///////////////////////////////////////////////////////////////////////////////

bool PSCFloat::doesTypeMatch( const RPNodeInput& input ) const
{
   return input.isA< RPFloatInput >();
}

///////////////////////////////////////////////////////////////////////////////

void PSCFloat::setValue( RCBindPixelShader& comm, const RPNodeInput& input, RuntimeDataBuffer& data )
{
   const RPFloatInput& castInput = static_cast< const RPFloatInput& >( input );
   float val = castInput.getValue( data );
   comm.setFloat( getName(), val );
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

PSCString::PSCString( const char* name)
   : PixelShaderConstant( name )
{
}

///////////////////////////////////////////////////////////////////////////////

RPNodeInput* PSCString::createRPNInput()
{
  return new RPStringInput( getName() );
}

///////////////////////////////////////////////////////////////////////////////

bool PSCString::doesTypeMatch( const RPNodeInput& input ) const
{
   return input.isA< RPStringInput >();
}

///////////////////////////////////////////////////////////////////////////////

void PSCString::setValue( RCBindPixelShader& comm, const RPNodeInput& input, RuntimeDataBuffer& data )
{
   const RPStringInput& castInput = static_cast< const RPStringInput& >( input );
   const std::string& val = castInput.getValue( data );
   comm.setString( getName(), val );
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

PSCTexture::PSCTexture( const char* name)
   : PixelShaderConstant( name )
{
}

///////////////////////////////////////////////////////////////////////////////

RPNodeInput* PSCTexture::createRPNInput()
{
   return new RPTextureInput( getName() );
}

///////////////////////////////////////////////////////////////////////////////

bool PSCTexture::doesTypeMatch( const RPNodeInput& input ) const
{
   return input.isA< RPTextureInput >();
}

///////////////////////////////////////////////////////////////////////////////

void PSCTexture::setValue( RCBindPixelShader& comm, const RPNodeInput& input, RuntimeDataBuffer& data )
{
   const RPTextureInput& castInput = static_cast< const RPTextureInput& >( input );
   ShaderTexture* val = castInput.getTexture( data );
   if ( val )
   {
      comm.setTexture( getName(), *val );
   }
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

PSCVec4::PSCVec4( const char* name)
   : PixelShaderConstant( name )
{
}

///////////////////////////////////////////////////////////////////////////////

RPNodeInput* PSCVec4::createRPNInput()
{
   return new RPVec4Input( getName() );
}

///////////////////////////////////////////////////////////////////////////////

bool PSCVec4::doesTypeMatch( const RPNodeInput& input ) const
{
   return input.isA< RPVec4Input >();
}

///////////////////////////////////////////////////////////////////////////////

void PSCVec4::setValue( RCBindPixelShader& comm, const RPNodeInput& input, RuntimeDataBuffer& data )
{
   const RPVec4Input& castInput = static_cast< const RPVec4Input& >( input );
   const D3DXVECTOR4& val = castInput.getValue( data );
   comm.setVec4( getName(), val );
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

PSCMatrix::PSCMatrix( const char* name)
   : PixelShaderConstant( name )
{
}

///////////////////////////////////////////////////////////////////////////////

RPNodeInput* PSCMatrix::createRPNInput()
{
   return new RPMatrixInput( getName() );
}

///////////////////////////////////////////////////////////////////////////////

bool PSCMatrix::doesTypeMatch( const RPNodeInput& input ) const
{
   return input.isA< RPMatrixInput >();
}

///////////////////////////////////////////////////////////////////////////////

void PSCMatrix::setValue( RCBindPixelShader& comm, const RPNodeInput& input, RuntimeDataBuffer& data )
{
   const RPMatrixInput& castInput = static_cast< const RPMatrixInput& >( input );
   const D3DXMATRIX& val = castInput.getValue( data );
   comm.setMtx( getName(), val );
}

///////////////////////////////////////////////////////////////////////////////
