#ifndef _SHADER_PARAM_H
#error "This file can only be included from ShaderParam.h"
#else

#include "core/Matrix.h"
#include "core/Vector.h"
#include "core/MemoryPoolAllocator.h"
#include "core/Assert.h"


///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

template< typename T >
ShaderParamBool< T >::ShaderParamBool( const IDString& nameId, bool val ) 
   : m_name( nameId )
   , m_val( val ) 
{}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

template< typename T >
ShaderParamInt< T >::ShaderParamInt( const IDString& nameId, int val ) 
   : m_name( nameId )
   , m_val( val ) 
{}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

template< typename T >
ShaderParamIntArray< T >::ShaderParamIntArray( const IDString& nameId, const int* arr, unsigned int size ) 
   : m_name( nameId )
   , m_size( size )
{
   m_val = new int[size];
   memcpy( m_val, arr, size * sizeof( int ) );
}

///////////////////////////////////////////////////////////////////////////////

template< typename T >
ShaderParamIntArray< T >::~ShaderParamIntArray()
{
   delete [] m_val; m_val = NULL;
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

template< typename T >
ShaderParamFloat< T >::ShaderParamFloat( const IDString& nameId, float val ) 
   : m_name( nameId )
   , m_val( val ) 
{}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

template< typename T >
ShaderParamFloatArray< T >::ShaderParamFloatArray( const IDString& nameId, const float* arr, unsigned int size ) 
   : m_name( nameId )
   , m_size( size )
{
   m_val = new float[size];
   memcpy( m_val, arr, size * sizeof( float ) );
}

///////////////////////////////////////////////////////////////////////////////

template< typename T >
ShaderParamFloatArray< T >::~ShaderParamFloatArray()
{
   delete [] m_val; m_val = NULL;
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

template< typename T >
ShaderParamMtx< T >::ShaderParamMtx( const IDString& nameId, const Matrix& val ) 
   : m_name( nameId )
   , m_val( val ) 
{}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

template< typename T >
ShaderParamMtxArray< T >::ShaderParamMtxArray( const IDString& nameId, const Matrix* arr, unsigned int size ) 
   : m_name( nameId )
   , m_size( size )
{
   m_val = new Matrix[size];
   memcpy( m_val, arr, size * sizeof( Matrix ) );
}

///////////////////////////////////////////////////////////////////////////////

template< typename T >
ShaderParamMtxArray< T >::~ShaderParamMtxArray()
{
   delete [] m_val; m_val = NULL;
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

template< typename T >
ShaderParamVec4< T >::ShaderParamVec4( const IDString& nameId, const Vector& val ) 
   : m_name( nameId )
   , m_val( val ) 
{}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

template< typename T >
ShaderParamVec4Array< T >::ShaderParamVec4Array( const IDString& nameId, const Vector* arr, unsigned int size ) 
   : m_name( nameId )
   , m_size( size )
{
   m_val = new Vector[size];
   memcpy( m_val, arr, size * sizeof( Vector ) );
}

///////////////////////////////////////////////////////////////////////////////

template< typename T >
ShaderParamVec4Array< T >::~ShaderParamVec4Array()
{
   delete [] m_val; m_val = NULL;
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

template< typename T >
ShaderParamString< T >::ShaderParamString( const IDString& nameId, const std::string& val ) 
   : m_name( nameId )
   , m_val( val ) 
{}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

template< typename T >
ShaderParamTexture< T >::ShaderParamTexture( const IDString& nameId, Texture* val ) 
   : m_name( nameId )
   , m_val( val ) 
{}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

template< typename T >
ShaderParamRenderTarget< T >::ShaderParamRenderTarget( const IDString& nameId, RenderTarget& val )
   : m_name( nameId )
   , m_val( val ) 
{
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

#endif _SHADER_PARAM_H
