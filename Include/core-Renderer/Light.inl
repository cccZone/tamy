#ifndef _LIGHT_H
#error "This file can only be included from Light.h"
#else


///////////////////////////////////////////////////////////////////////////////

unsigned int Light::getChangeIdx() const
{
   return m_changeIdx;
}

///////////////////////////////////////////////////////////////////////////////

const Light::LightType& Light::getType() const
{
   return m_type;
}

///////////////////////////////////////////////////////////////////////////////

void Light::setAmbientColor(const Color& ambient)
{
   ++m_changeIdx;
   m_ambient = ambient;
}

///////////////////////////////////////////////////////////////////////////////

const Color& Light::getAmbientColor() const
{
   return m_ambient;
}

///////////////////////////////////////////////////////////////////////////////

void Light::setDiffuseColor(const Color& diffuse)
{
   ++m_changeIdx;
   m_diffuse = diffuse;
}

///////////////////////////////////////////////////////////////////////////////

const Color& Light::getDiffuseColor() const
{
   return m_diffuse;
}

///////////////////////////////////////////////////////////////////////////////

void Light::setSpecularColor(const Color& specular)
{
   ++m_changeIdx;
   m_specular = specular;
}

///////////////////////////////////////////////////////////////////////////////

const Color& Light::getSpecularColor() const
{
   return m_specular;
}

///////////////////////////////////////////////////////////////////////////////

float Light::getRange() const
{
   return m_range;
}

///////////////////////////////////////////////////////////////////////////////

void Light::setAttenuation(float constant, float linear, float quadratic)
{
   ++m_changeIdx;
   m_attConstant = constant;
   m_attLinear = linear;
   m_attQuadratic = quadratic;
}

///////////////////////////////////////////////////////////////////////////////

float Light::getConstantAtt() const
{
   return m_attConstant;
}

///////////////////////////////////////////////////////////////////////////////

float Light::getLinearAtt() const
{
   return m_attLinear;
}

///////////////////////////////////////////////////////////////////////////////

float Light::getQuadraticAtt() const
{
   return m_attQuadratic;
}

///////////////////////////////////////////////////////////////////////////////

void Light::setSpotlightFeatures(float falloff, float theta, float phi)
{
   ++m_changeIdx;
   m_spotFalloff = falloff;
   m_spotTheta = theta;
   m_spotPhi = phi;
}

///////////////////////////////////////////////////////////////////////////////

float Light::getFalloff() const
{
   return m_spotFalloff;
}

///////////////////////////////////////////////////////////////////////////////

float Light::getTheta() const
{
   return m_spotTheta;
}

///////////////////////////////////////////////////////////////////////////////

float Light::getPhi() const
{
   return m_spotPhi;
}

///////////////////////////////////////////////////////////////////////////////

#endif // _LIGHT_H
