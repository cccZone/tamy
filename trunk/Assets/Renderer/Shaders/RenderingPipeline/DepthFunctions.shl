// RenderingPipeline/DepthFunctions.shl
// Functions for maniuplating depth & normals information encoded in a texture
// the depth & normals are rendered to

// ----------------------------------------------------------------------------

// [rg] contains the encoded depth value ( 16 bits), [ba] - XY components of the normal vector
// ( Z can be recreated using a cross product )
float4 encodeDepthAndNormal( float3 normal, float depth, float maxZ )
{
   float remappedDepth = depth / maxZ;

   const float2 bitSh = float2( 256.0, 1.0 );
	const float2 bitMsk = float2( 0.0, 1.0 / 256.0 );
	float2 res = frac( remappedDepth * bitSh );
	res -= res.xx * bitMsk;

	return float4( res, normal.xy );
}


float3 decodeNormal( float4 input )
{ 
   float3 normal;
   
   normal.xy = 2.0f * input.ba - 1.0f; 
   normal.z = sqrt( max( 0, 1 - dot( normal.xy, normal.xy ) ) );
   return normal; 
} 

float decodeDepth( float4 input, float maxZ )
{
   const float2 bitSh = float2( 1.0 / 256.0, 1.0 );
	float val = dot( input.rg, bitSh );

   return val * maxZ;
}
