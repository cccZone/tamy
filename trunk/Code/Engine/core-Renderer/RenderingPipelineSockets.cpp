#include "core-Renderer/RenderingPipelineSockets.h"
#include "core-Renderer/RenderingPipelineNode.h"
#include <algorithm>


///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

BEGIN_ABSTRACT_OBJECT( RPNodeInput, Object );
   PROPERTY( std::string, m_name );
   PROPERTY( RPNodeOutput*, m_connectedOutput );
END_OBJECT();

///////////////////////////////////////////////////////////////////////////////

RPNodeInput::RPNodeInput( const std::string& name )
   : GBNodeInput< RPNodeOutput >( name )
{
}

///////////////////////////////////////////////////////////////////////////////

RPNodeInput::~RPNodeInput()
{
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

BEGIN_ABSTRACT_OBJECT( RPNodeOutput, Object );
   PROPERTY( std::string, m_name );
   PROPERTY( std::vector< RenderingPipelineNode* >, m_connectedNodes );
END_OBJECT();

///////////////////////////////////////////////////////////////////////////////

RPNodeOutput::RPNodeOutput( const std::string& name )
   : GBNodeOutput< RenderingPipelineNode >( name )
{
}

///////////////////////////////////////////////////////////////////////////////

RPNodeOutput::~RPNodeOutput()
{
}

///////////////////////////////////////////////////////////////////////////////
