#include "core-Renderer\ActiveCameraNode.h"


///////////////////////////////////////////////////////////////////////////////

ActiveCameraNode::ActiveCameraNode()
      : m_defaultNode("DefaultActiveCameraNode"),
      m_activeCamera(&m_defaultNode)
{
}

///////////////////////////////////////////////////////////////////////////////

ActiveCameraNode::~ActiveCameraNode()
{
   m_activeCamera = NULL;
}

///////////////////////////////////////////////////////////////////////////////

void ActiveCameraNode::setCameraNode(Node& camera)
{
   m_activeCamera = &camera;
}

///////////////////////////////////////////////////////////////////////////////

void ActiveCameraNode::resetCameraNode()
{
   m_activeCamera = &m_defaultNode;
}

///////////////////////////////////////////////////////////////////////////////

const D3DXMATRIX& ActiveCameraNode::getGlobalMtx()
{
   return m_activeCamera->getGlobalMtx();
}

///////////////////////////////////////////////////////////////////////////////

const D3DXMATRIX& ActiveCameraNode::getLocalMtx() const
{
   return m_activeCamera->getLocalMtx();
}

///////////////////////////////////////////////////////////////////////////////

void ActiveCameraNode::setLocalMtx(const D3DXMATRIX& localMtx)
{
   m_activeCamera->setLocalMtx(localMtx);
}

///////////////////////////////////////////////////////////////////////////////

D3DXMATRIX& ActiveCameraNode::accessLocalMtx()
{
   return m_activeCamera->accessLocalMtx();
}

///////////////////////////////////////////////////////////////////////////////

void ActiveCameraNode::setRightVec(const D3DXVECTOR3& vec)
{
   m_activeCamera->setRightVec(vec);
}

///////////////////////////////////////////////////////////////////////////////

void ActiveCameraNode::setUpVec(const D3DXVECTOR3& vec)
{
   m_activeCamera->setUpVec(vec);
}

///////////////////////////////////////////////////////////////////////////////

void ActiveCameraNode::setLookVec(const D3DXVECTOR3& vec)
{
   m_activeCamera->setLookVec(vec);
}

///////////////////////////////////////////////////////////////////////////////

void ActiveCameraNode::setPosition(const D3DXVECTOR3& vec)
{
   m_activeCamera->setPosition(vec);
}

///////////////////////////////////////////////////////////////////////////////

D3DXVECTOR3 ActiveCameraNode::getRightVec() const
{
   return m_activeCamera->getRightVec();
}

///////////////////////////////////////////////////////////////////////////////

D3DXVECTOR3 ActiveCameraNode::getUpVec() const
{
   return m_activeCamera->getUpVec();
}

///////////////////////////////////////////////////////////////////////////////

D3DXVECTOR3 ActiveCameraNode::getLookVec() const
{
   return m_activeCamera->getLookVec();
}

///////////////////////////////////////////////////////////////////////////////

D3DXVECTOR3 ActiveCameraNode::getPosition() const
{
   return m_activeCamera->getPosition();
}

///////////////////////////////////////////////////////////////////////////////
