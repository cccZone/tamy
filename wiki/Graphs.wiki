#labels Graph
=Graphs=

Graphs are a building block of many engine systems, thus we provide a wide range of tools to operate on them.

==Graph==

This is a representation of a mathematical graph.
It's compact and provides a range of algorithms that operate on it.

A graph has *nodes* and *edges*. Each of these can be a different type.
You can use privitive types side by side with classes.

*One exception* to this rule is the case when you want to use a structure as your edge - is that case you need to equip it with a conversion operator `operator Graph::Index()` defined.

So basically - an edge at its simplest form ( when you use an *int* to represent it for instance ) represents the index of target node it connects. If you want to add some additional info to the node, you need to create a structure with the forementioned conversion operator that will return the index of the end node, and then you can add whatever additional info you require.

Let's take an example - let's assume you want to create a graph, where you represent a tactical map - each of the nodes has a structure representing some tactical data, and each edge describes how expensive it is to move from one position to another:

{{{
struct TacticalData
{
   // put some applicable fields here
};

struct TravelCostEdge;
typedef Graph< TacticalData, SomeEdge > TacticalMapGraph;

struct TravelCostEdge
{
     int endIdx;
     int val;

     TravelCostEdge( int _endIdx, int _val ) : endIdx( _endIdx ), val( _val ) {}

     operator TacticalMapGraph::Index() const { return endIdx; }
};


TacticalMapGraph map;
}}}

We've just defined our first graph type.

The edge holds info what node it connects, and the forementioned *conversion operator* has to return that index.


Let's fill such a graph with data now:

{{{
TacticalMapGraph map;

// first, we need to add the nodes
map.addNode( TacticalData() );  // node 0
map.addNode( TacticalData() );  // node 1

// then - once we have the nodes, we can connect them with edges
map.connect( 0, SomeEdge( 1, 10 ) );

// we just connected edge 0 with edge 1, and assigned travel cost 10 to it
}}}

It may seem not very convenient and readable to spread the info about which nodes an edge connects between one method parameter and the edge constructor - valid point indeed.
It was made that way with performance in mind - this way can keep compact data structures inside a graph and resign from using polymorphism - at a cost of this small inconvenience.

==Algorithms==

Ok - so we have a graph. What next? Well - a graph on its own is just a bunch of numbers and doesn't help us much.

But when we start running algorithms on it, it quickly becomes a tool of choice when it comes to sorting and finding data quickly.

Here's a couple of algorithms that operate on a graph:

  * `GraphTopologicalSort` - on occasion you may want to flatten a graph structure. Such a need may arise if i.e. your graph nodes represent c++ files, and its edges represent dependencies between them, and you want to sort the files in such an order, that if you start compiling them, you won't run into a dependency problem. Then a *topological sort* is the tool you've been looking for.

  Here's a transcript from a unit test that shouws the algorithm in use:
{{{
#include "core\GraphAlgorithms.h"

TEST(GraphTopologicalSort, simpleGraph)
{
   MockGraph graph;
   graph.addNode( MockNode() );
   graph.addNode( MockNode() );
   graph.addNode( MockNode() );
   graph.addNode (MockNode() );
   graph.connect( 0, 1 );
   graph.connect( 0, 2 );
   graph.connect( 2, 1 );
   graph.connect( 1, 3 );

   std::vector< MockGraph::Index > result;
   GraphTopologicalSort( result, graph );

   CPPUNIT_ASSERT_EQUAL( (unsigned int)4, result.size() );
   CPPUNIT_ASSERT_EQUAL( 0, result[0] );
   CPPUNIT_ASSERT_EQUAL( 2, result[1] );
   CPPUNIT_ASSERT_EQUAL( 1, result[2] );
   CPPUNIT_ASSERT_EQUAL( 3, result[3] );
}
}}}

  _IMPORTANT_ - the graph can't be a *DAG*. If the algorithm encounters a cycle in the graph, it will throw an exception.

  * `GraphDijkstra` - it's an implementation of the *Dijkstra algorithm* for pruning obsolete branches from the graph and creating a simpler graph with shortest possible paths between all of its nodes. 

  Here's a unit test presenting its usage:

{{{
#include "core\GraphAlgorithms.h"

TEST(GraphDijkstra, simpleGraph)
{
   MockGraph graph;
   graph.addNode(MockNode());
   graph.addNode(MockNode());
   graph.addNode(MockNode());
   graph.addNode(MockNode());
   graph.connect(0, MockEdge(1, 1));
   graph.connect(0, MockEdge(2, 2));
   graph.connect(2, MockEdge(1, 5));
   graph.connect(1, MockEdge(3, 3));

   MockGraph result;
   GraphDijkstra(result, graph, 0);

   CPPUNIT_ASSERT_EQUAL((unsigned int)3, result.getEdgesCount());

   CPPUNIT_ASSERT(result.getEdgeIdx(0, 1) != MockGraph::InvalidIndex);
   CPPUNIT_ASSERT_EQUAL(1, result.getEdge(result.getEdgeIdx(0, 1)).cost);

   CPPUNIT_ASSERT(result.getEdgeIdx(0, 2) != MockGraph::InvalidIndex);
   CPPUNIT_ASSERT_EQUAL(2, result.getEdge(result.getEdgeIdx(0, 2)).cost);

   CPPUNIT_ASSERT(result.getEdgeIdx(1, 3) != MockGraph::InvalidIndex);
   CPPUNIT_ASSERT_EQUAL(3, result.getEdge(result.getEdgeIdx(1, 3)).cost);

}
}}}